String getCommit() {
    def stdout = new ByteArrayOutputStream()

    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

def releaseVersion = findProperty('github.tag') ?: getCommit()
println("Release version: ${releaseVersion}")

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    group 'io.github.whilein.wcommons'
    version releaseVersion

    repositories {
        mavenCentral()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = project.name
                    description = project.description

                    url = 'https://github.com/LastCraftInc/wcommons'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'whilein'
                            name = 'whilein'
                            email = 'whilein.1@gmail.com'
                        }
                    }
                }

                groupId = project.group
                artifactId = project.name
                version = project.version

                from components.java
            }
        }

        repositories {
            mavenLocal()

            // github packages
            maven {
                url = "https://maven.pkg.github.com/LastCraftInc/wcommons"

                credentials {
                    username = findProperty('gpr.user')
                    password = findProperty('gpr.password')
                }
            }
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.20'

        compileOnly 'org.jetbrains:annotations:23.0.0'

        testCompileOnly 'org.projectlombok:lombok:1.18.20'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

        testCompileOnly 'org.jetbrains:annotations:22.0.0'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        targetCompatibility = JavaVersion.VERSION_11
        sourceCompatibility = JavaVersion.VERSION_11
    }

    test {
        useJUnitPlatform()

        testLogging {
            showStandardStreams = true

            exceptionFormat "short"
            events("started", "skipped", "failed")
        }
    }
}